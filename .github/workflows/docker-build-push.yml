name: Build and Deploy Gold Tracker

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allows manual trigger from GitHub UI

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write # Added permission for security scan results

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Docker Buildx for efficient builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Log in to GitHub Container Registry
      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image with 'latest' tag only
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Optional: Scan for vulnerabilities
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH"
          exit-code: "0"

      # Upload scan results to GitHub Security tab
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

  notify:
    name: Notify on success
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success()

    steps:
      - name: Send deployment notification
        run: |
          echo "âœ… Gold Tracker image published successfully"
          echo "ðŸ“¦ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo ""
          echo "To pull and run this image:"
          echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "docker run -d -p 8855:8855 -e GOLD_API_KEY=your_api_key ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
